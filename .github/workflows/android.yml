name: Android CI

on:
  push:
    paths:
      - 'app/src/main/jniLibs/**'
      - 'app/build.gradle.kts'
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-build]
  release:
    types: [ published ]
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#storing-base64-binary-blobs-as-secrets
      - name: Retrieve and decode keystore file
        env:
          STORE_FILE: ${{ secrets.STORE_FILE }}
        run: echo "$STORE_FILE" | base64 --decode > keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew assembleRelease bundleRelease
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_FILE: ${{ secrets.STORE_FILE }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}

      - name: Get Info
        run: |
          nps_version=$(grep -oP '^val npsVersion = "\K[0-9\.]+' app/build.gradle.kts | xargs)
          app_version_code=$(grep -oP '^val appVersionCode = \K[0-9]+' app/build.gradle.kts)
          app_version_name=$(grep -oP '^val appVersionName = "\K[0-9\.]+' app/build.gradle.kts)
          application_id=$(grep -oP 'applicationId\s*=\s*"\K[^"]+' app/build.gradle.kts)

          echo "NPS version: '$nps_version'"
          echo "APP Version Code: $app_version_code"
          echo "APP Version Name: $app_version_name"
          echo "Application ID: $application_id"

          echo "NPS_VERSION=$nps_version" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$app_version_code" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$app_version_name" >> $GITHUB_ENV
          echo "APPLICATION_ID=$application_id" >> $GITHUB_ENV

      #- name: Upload artifacts
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: android-artifacts
      #    path: |
      #      app/build/outputs/apk/release/*.apk
      #      app/build/outputs/bundle/release/*.aab

      - name: Upload release files
        uses: softprops/action-gh-release@v2
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: v${{ env.APP_VERSION_NAME }}
          name: v${{ env.APP_VERSION_NAME }}
          body: NPC ${{ env.NPS_VERSION }}
          files: |
            app/build/outputs/apk/release/*.apk
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger update Magisk
        run: |
          curl -X POST https://api.github.com/repos/djylb/npsclient-magisk/dispatches \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            -d '{"event_type":"trigger-update"}'

      - name: Generate release notes
        run: |
          mkdir -p distribution/whatsnew
          echo "NPC $NPS_VERSION" > distribution/whatsnew/whatsnew-en-US

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.APPLICATION_ID }}
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: production
          status: completed
          releaseName: ${{ env.APP_VERSION_NAME }}
          whatsNewDirectory: distribution/whatsnew
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}

